{
  "data": {
    "lesson": {
      "id": 654047,
      "key": "3dc22711-adb9-4e58-a299-fc89bce79d86",
      "title": "Investigate a Relational Database",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "The **Sakila Movie database** is a SQL database of online DVD rentals . You will query the database to answer questions about business decisions.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "DVD Rental ERD 2",
            "uri": "https://video.udacity-data.com/topher/2018/September/5ba95be0_dvd-rental-erd-2/dvd-rental-erd-2.pdf"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "f3509bf4-9bab-447d-adfc-ece9fd1be306",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 36000,
        "semantic_type": "Project",
        "title": "Investigate a Relational Database",
        "description": "To submit your project, please do the following:\n* Review your project against the project [Rubric](https://review.udacity.com/#!/rubrics/2095/view). Reviewers will use this to evaluate your work.\n* Create your slides with whatever presentation software you'd like (e.g., Google Slides, PowerPoint, Keynote, etc.).\n\n**In order to review your presentation, you will need to save your slides as a `PDF`.**  You can do this from within Google Slides by selecting **File > Download as > PDF Document**.\n\n* Create a separate text file with each of the SQL queries used to create the visualizations.\n* Save the presentation as a PDF and the SQL queries in a text file(.txt) in the same folder.<br><br>\n![folder](https://d17h27t6h515a5.cloudfront.net/topher/2017/November/5a1f2bde_screen-shot-2017-11-29-at-1.47.36-pm/screen-shot-2017-11-29-at-1.47.36-pm.png)<br><br>\n\n\n* Zip (compress) the folder and submit this zipped folder with both files in it.<br><br>\n![zip](https://d17h27t6h515a5.cloudfront.net/topher/2017/November/5a1f2bdf_screen-shot-2017-11-29-at-1.47.53-pm/screen-shot-2017-11-29-at-1.47.53-pm.png)<br><br>\n* Submit the zipped file.<br><br>\n![submission](https://d17h27t6h515a5.cloudfront.net/topher/2017/November/5a1f2be0_screen-shot-2017-11-29-at-1.48.06-pm/screen-shot-2017-11-29-at-1.48.06-pm.png)<br><br>\n\nOnce you've checked the above, click on the \"Submit Project\" button below to go to the project submission page. After you submit your project, it can take up to a week for it to be evaluated. Most of the time, it is much faster! In the meantime, you can feel free to continue your learning in the next part of the program!",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2095",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 689728,
          "key": "da999ce9-c122-43dd-bb1a-aeefccf75c49",
          "title": "Project Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "da999ce9-c122-43dd-bb1a-aeefccf75c49",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 689729,
              "key": "717420f8-a2a7-42cb-8c2a-89e53721b4a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overview\nIn this project, you will use SQL to explore a database related to movie rentals. You will write SQL code to run SQL queries and answer interesting questions about the database. As part of your project submission, you will run SQL queries and build visualizations to showcase the output of your queries.\n\nWe will begin by getting familiar with the database. We have included Practice Quizzes that include a series of questions that will assure you have mastered the main concepts taught throughout the SQL lessons. These practice quizzes will **not** be \"graded\" by a reviewer, but they will help you self-assess and make sure you are on the right track. The quizzes are there to assist you in understanding the database before developing the questions that you wish to include for the project.\n\nThe project submission is a presentation, which **will** be reviewed, and for which you will need to **Meet Expectations** to pass.   For the presentation component, you will create four slides.  Each slide will:\n\n* Have a question of interest.\n* Have a supporting SQL query needed to answer the question.\n* Have a supporting visualization created using the final data of your SQL query that answers your question of interest.\n\nYou will submit your project at the end of the project lessons. Your project will include:\n\n* A set of slides with a question, visualization, and small summary on each slide.\n* A text file with your queries needed to answer each of the four questions.\n\nThe essentials of your project submission are discussed on the page labeled as **Project Submission**.\n\n## Additional Resources\n\nFor the second part of this project, you may want a refresher of statistics or working with spreadsheets (perhaps specific to creating data visualizations).  There are additional resources in the <a href =\"https://classroom.udacity.com/nanodegrees/nd104/parts/870c59b2-8220-4a8b-9aa5-8525f6de3cf3\">extracurriculars</a> of this classroom to assist with these ideas if you need them!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 629223,
          "key": "554036cb-6948-46a1-99f5-f4d413d17397",
          "title": "Project Details",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "554036cb-6948-46a1-99f5-f4d413d17397",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "DVD Rental ERD 2",
                "uri": "https://video.udacity-data.com/topher/2018/September/5ba96b12_dvd-rental-erd-2/dvd-rental-erd-2.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 631244,
              "key": "6ab5b10d-e4c8-488c-9c82-00f1cb6af57a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## **Introduction**\nIn this project, you will query the **Sakila DVD Rental database**. The Sakila Database holds information about a company that rents movie DVDs. For this project, you will be querying the database to gain an understanding of the customer base, such as what the patterns in movie watching are across different customer groups, how they compare on payment earnings, and how the stores compare in their performance. To assist you in the queries ahead, the schema for the DVD Rental database is provided below. \n\n(Note: One quirk you may notice as you explore this \"fake\" database is that the rental dates are all from 2005 and 2006, while the payment dates are all from 2007. Don't worry about this. )",
              "instructor_notes": ""
            },
            {
              "id": 727821,
              "key": "01dd793f-f700-46c0-b2dd-d9a58180408b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/September/5ba95d23_dvd-rental-erd-2/dvd-rental-erd-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/01dd793f-f700-46c0-b2dd-d9a58180408b",
              "caption": "",
              "alt": "",
              "width": 813,
              "height": 989,
              "instructor_notes": null
            },
            {
              "id": 676583,
              "key": "d5f048bd-643c-45bc-96b3-051b308f0e18",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Source: http://www.postgresqltutorial.com/postgresql-sample-database/",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 676541,
          "key": "b5f26d4b-5ac0-46eb-ade5-ee12e41f59bb",
          "title": "Workspace vs. Local environment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b5f26d4b-5ac0-46eb-ade5-ee12e41f59bb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676543,
              "key": "23217c0f-1ab8-4648-ab93-d1c4e9f8e99c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using the Classroom Workspace vs. Setting up your local environment\n\nWe have provided two ways for you to work on the SQL database. \n\n## Option 1:\nWe have set up the DVD Rental database within the Classroom Workspace to allow you to run your queries on the database. We ** encourage you to use the Workspace within your classroom**. __ If you are short on time, and don't have at least a couple of hours available to set up the database, we strongly recommend using the Workspace within your classroom.__ If you prefer to use the classroom workspace, jump ahead to the concept titled ** \"Composite Key\".** \n\n## Option 2:\nAlternately, you can run the queries on your local machine using a new database system, PostgreSQL. Please keep in mind - ** this option requires setting aside at least a couple of hours to set up the PostgreSQL database. Also, you may find learning to set up a PostgreSQL database on your local machine involves a sharp learning curve.** Learning how to set up and use PostgreSQL is a valuable skill to add to your data analyst skill set, so the time you spend on it will be worth it. \n\nIf you choose Option 2, you will have two additional tasks to complete: \n\na) You will need to install the new database system, PostgreSQL.\n\nb) You will need to load the database in your local PostgreSQL database server.\n\n### What is PostgreSQL?\nPostgreSQL is an open-source object-relational database system that is used frequently in industry (and that is running in the background of the SQL queries you have been running in the classroom). At some point, you may find yourself learning how to use this platform and running the application locally on your machine. However, learning to use and manage the PostgreSQL applications is in itself a challenge. If you decide to use the PostgreSQL platform, we strongly advise that you set aside some time for getting familiar with the environment before beginning this project. You will find this step well worth the effort!\n\n###  We encourage you to use the Classroom Workspaces if PostgreSQL installation and setting up the database is taking too much time. \nEither Option 1 or Option 2 can be used to complete and pass the project!  You do not need to do both.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 632926,
          "key": "2fbfa410-f0d6-47bb-b6ae-b07193d7df1a",
          "title": "Set Up Your Local Environment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2fbfa410-f0d6-47bb-b6ae-b07193d7df1a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 632932,
              "key": "bf753002-9ef5-4a75-8079-93518df60892",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Let's set up your local environment###\n\n### What is PostgreSQL?\n\nPostgreSQL is an object-relational database management system. Object-relational databases use a hybrid approach to databases.  \n<ol>\n<li>In **object databases**, information is stored as objects, much like object-oriented programming.\n<li>In **relational databases**, information is stored in tables with relationships between tables defined by primary and foreign keys.\n</ol>\nImportantly, PostgreSQL allows the use of advanced functions (such as Window Functions), and even development and use of custom functions written in different programming languages. Here is a link to better understand what is meant by an object-relational database, and how it differs from a relational database. \n\n<a href = \"https://en.wikipedia.org/wiki/Object-relational_database\" title=\"Link to Object-relational database\">https://en.wikipedia.org/wiki/Object-relational_database</a>\n\n\nReady to proceed with PostgreSQL? Follow along!\n",
              "instructor_notes": ""
            },
            {
              "id": 632935,
              "key": "1ef8115e-2392-4472-adbe-78f53d5d2a82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 1. Downloading PostgreSQL\n\nFirst, you will need to install PostgreSQL on your local machine. Select the following three components during installation - PostgreSQL server, pgAdmin, and command-line tools. pgAdmin is a GUI tool for managing the database. Download the installer from the link below, and install with the admin privileges:<br>\n- **Installing PostgreSQL for Windows**:<br>https://www.postgresql.org/download/windows/  and follow the steps mentioned [here](http://www.postgresqltutorial.com/install-postgresql/) <br><br>\n\n- **Installing PostgreSQL for Mac OS**:<br>\nhttps://www.postgresql.org/download/macosx/ and follow the steps mentioned [here](https://www.postgresqltutorial.com/install-postgresql-macos/)\n\nFriendly reminder! Please **write down the database superuser (postgres) password** as you will need it to create the Sakila database once you have installed the PostgreSQL server. \n* Optionally, you can verify the successful installation of PostgreSQL using the following commands in your terminal:\n```bash\n# Server version:\npg_config --version\n# Client version:\npsql --version\n```",
              "instructor_notes": ""
            },
            {
              "id": 632955,
              "key": "b47b8596-1608-4dcd-b1fc-57b13e6c91a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 2. Downloading Sakila database\nOnce PostgreSQL server is installed, you will need to download the Movie database from this page: [PostgreSQL Sample Database](http://www.postgresqltutorial.com/postgresql-sample-database/)\n\nScroll down and click on the orange \"Download DVD Rental Sample Database\" button. \n\nThis will download a zipped file, and you will need to extract the ** dvdrental.tar file**.",
              "instructor_notes": ""
            },
            {
              "id": 691639,
              "key": "6f4ec32e-c598-457b-9963-3ce72ef4a39b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b6e399c_download-sampledatabase/download-sampledatabase.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6f4ec32e-c598-457b-9963-3ce72ef4a39b",
              "caption": "",
              "alt": "",
              "width": 600,
              "height": 915,
              "instructor_notes": null
            },
            {
              "id": 691637,
              "key": "6c3162fe-545c-4114-a0f6-76460d00fb71",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 3. Connect to the PostgreSQL server\nLaunch pgAdmin tool, a graphical tool for managing and developing PostgreSQL databases. The PostgreSQL interactive installer by EDB includes the pgAdmin by default. If you have a native PostgreSQL installation, you can download pgAdmin from [here](https://www.pgadmin.org/download/). It will take some time to launch the pgAdmin tool. Let's connect the pgAdmin to the PostgreSQL server. \n\n* Within the Object browser (left-navigation pane), right-click on the *Servers* &#8594; *Create* &#8594; *Server...* option.\n",
              "instructor_notes": ""
            },
            {
              "id": 1161271,
              "key": "afbbdd55-3c29-4650-a0dc-9e0874092305",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051cdc4_screenshot-2021-03-17-at-3.03.23-pm/screenshot-2021-03-17-at-3.03.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/afbbdd55-3c29-4650-a0dc-9e0874092305",
              "caption": "Connect to a PostgreSQL server",
              "alt": "",
              "width": 600,
              "height": 552,
              "instructor_notes": null
            },
            {
              "id": 1161279,
              "key": "ced54ce9-764e-4c9f-9393-b5036fed1e4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* It will open up a dialog box asking for the PostgreSQL server name, and credentials for the “postgres\" superuser. See the snapshot below.",
              "instructor_notes": ""
            },
            {
              "id": 1161280,
              "key": "6e851436-1ce0-44fa-bb40-f3550d25851c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051cf85_screenshot-2021-03-17-at-3.04.14-pm/screenshot-2021-03-17-at-3.04.14-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6e851436-1ce0-44fa-bb40-f3550d25851c",
              "caption": "Provide server details",
              "alt": "",
              "width": 500,
              "height": 1104,
              "instructor_notes": null
            },
            {
              "id": 1161270,
              "key": "6e9fb547-9972-4ebf-8a6f-511383d95e40",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n* Provide the following details, and leave the other fields as default. \n\n<center>\n\n|**Tab**|**Field**|**Value**|\n|---|---|---|\n|General|Name|`PostgreSQL`|\n|Connection|Host name|`localhost`|\n||Post|`5432` (default)|\n||Username|`postgres`|\n||Password|As you have chosen <br>while installation|\n</center>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All steps are also mentioned here - [connect to the PostgreSQL server](https://www.postgresqltutorial.com/connect-to-postgresql-database/).",
              "instructor_notes": ""
            },
            {
              "id": 691635,
              "key": "96c4d2c4-0b0b-4b6e-9012-9ce638ee1ebc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 4. Loading database\nThe next step is to load the DVD Rental database into your PostgreSQL server on your machine. \nFollow the instructions on the page - [Load PostgreSQL Sample Database](http://www.postgresqltutorial.com/load-postgresql-sample-database/) (scroll down ⅓ on this page). There are two ways to load the database:\n 1. Load the sample database using psql tool\n 2. Load the DVD Rental database using the pgAdmin\n\nWe will use the *Load the DVD Rental database using pgAdmin tool* method. See the snapshot below. ",
              "instructor_notes": ""
            },
            {
              "id": 691641,
              "key": "a66a2321-d1fb-4bee-a8f6-2820a849be91",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/60519f72_screenshot-2021-03-17-at-11.48.40-am/screenshot-2021-03-17-at-11.48.40-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a66a2321-d1fb-4bee-a8f6-2820a849be91",
              "caption": "A snapshot from https://www.postgresqltutorial.com/load-postgresql-sample-database/ ",
              "alt": "",
              "width": 600,
              "height": 1830,
              "instructor_notes": null
            },
            {
              "id": 691642,
              "key": "f5fca051-dbf1-406a-9bff-119e4850f2af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The general steps to load the sample database into your local PostgreSQL database server are:\n1. Create a blank database, with the name `dvdrental`.\n",
              "instructor_notes": ""
            },
            {
              "id": 1161293,
              "key": "a7dc01c5-05fc-49d2-a8ae-e44ade1bc3c0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051d1b8_screenshot-2021-03-17-at-3.19.29-pm/screenshot-2021-03-17-at-3.19.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a7dc01c5-05fc-49d2-a8ae-e44ade1bc3c0",
              "caption": "Create an empty database",
              "alt": "",
              "width": 600,
              "height": 572,
              "instructor_notes": null
            },
            {
              "id": 1161291,
              "key": "1701f87a-506f-4fe4-9513-1a5761285200",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. Restore the data from the locally downloaded Sakila database.\n",
              "instructor_notes": ""
            },
            {
              "id": 1161295,
              "key": "3a1a69b2-d320-4246-b52b-af357c9ff691",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051d1e4_screenshot-2021-03-17-at-3.20.35-pm/screenshot-2021-03-17-at-3.20.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3a1a69b2-d320-4246-b52b-af357c9ff691",
              "caption": "Restore the database",
              "alt": "",
              "width": 600,
              "height": 1110,
              "instructor_notes": null
            },
            {
              "id": 1161292,
              "key": "f5103b87-8dfb-4674-a860-3605d659adf5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. You need to have either the unzipped data folder or the tar format file locally. Choose the desired source format and the path of the file/folder. \n",
              "instructor_notes": ""
            },
            {
              "id": 1161299,
              "key": "d8c786f9-6248-449d-b2dd-4a364d2a3a75",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051d252_screenshot-2021-03-17-at-3.21.04-pm/screenshot-2021-03-17-at-3.21.04-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d8c786f9-6248-449d-b2dd-4a364d2a3a75",
              "caption": "Provide source format and path",
              "alt": "",
              "width": 600,
              "height": 804,
              "instructor_notes": null
            },
            {
              "id": 692647,
              "key": "845a57c5-9226-4ae6-8b3f-a7eea9df7caa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 5. Choose the DVD Rental database\n\nOnce, you have restored the database, you are all set to use it. Choose the *dvdrental* database under Databases (left-navigation pane). \n\n",
              "instructor_notes": ""
            },
            {
              "id": 692649,
              "key": "1f76b5da-8cf8-4a9b-8d21-1ce218249111",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051ca3d_screenshot-2021-03-17-at-2.51.31-pm/screenshot-2021-03-17-at-2.51.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1f76b5da-8cf8-4a9b-8d21-1ce218249111",
              "caption": "Choose the database",
              "alt": "",
              "width": 600,
              "height": 708,
              "instructor_notes": null
            },
            {
              "id": 692617,
              "key": "b492dce0-96a5-4051-b9ba-1cf33a394d94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Step 6. Running Queries on your dvdrental database\n\nReady to run some queries??<br> \nOpen the *Query tool*, write your queries in the *Query editor*, and run them to see your data output. See the snapshots below. ",
              "instructor_notes": ""
            },
            {
              "id": 1161255,
              "key": "717b238e-26e8-4444-9235-7f6df2dc3144",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051c931_screenshot-2021-03-17-at-2.42.19-pm/screenshot-2021-03-17-at-2.42.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/717b238e-26e8-4444-9235-7f6df2dc3144",
              "caption": "Open Query tool",
              "alt": "",
              "width": 600,
              "height": 1628,
              "instructor_notes": null
            },
            {
              "id": 1161256,
              "key": "72a456b1-dd92-4283-bd6a-fa22b7105800",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/March/6051c991_screenshot-2021-03-17-at-2.45.12-pm/screenshot-2021-03-17-at-2.45.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/72a456b1-dd92-4283-bd6a-fa22b7105800",
              "caption": "Query editor pane",
              "alt": "",
              "width": 600,
              "height": 1564,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 632957,
          "key": "f882b182-2455-47dc-a789-d294f07cceb2",
          "title": "Composite Key",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f882b182-2455-47dc-a789-d294f07cceb2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "DVD Rental ERD 2",
                "uri": "https://video.udacity-data.com/topher/2018/September/5ba96b33_dvd-rental-erd-2/dvd-rental-erd-2.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 632958,
              "key": "8e2cc3be-bca7-432a-b02b-e73befb73b0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Composite Key\n\nYou are familiar with primary and foreign keys in Entity Relationship Diagrams (ERDs). We will introduce a new type of key - a Composite Key - as part of the DVD Rental Database project.\n\nPlease have a copy of the ERD handy. It is available at the bottom of the page as a resource as well.\n\nA table with a Composite Key does not have a unique key for each row in the table. Instead a combination of two or more columns serves as a unique identifier for each row. \n\nYou can read more about Composite Keys in the following link:\n\nhttps://www.javatpoint.com/sql-composite-key\n\nHere is an example from the DVD Rental Database. You can see below some sample rows from the film_actor table. We have provided two table headers, the first where the rows are sorted by film_id, and the second where the rows are sorted by actor_id. \n\nComparing the two table headers,  you can see just using 1 column, e.g., the actor_id column, does not uniquely identify the relationship between the film and actor. Similarly, using just the film_id column does not uniquely identify the relationship. The combination of actor_id with film_id creates a combined (or composite) unique value for each row in the table. The combination of the two column values (actor_id = 1 and film_id = 1) identify the entity relationship.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 682549,
              "key": "9d005774-4138-49f9-96c0-be370aabf854",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b5b5478_screen-shot-2018-07-27-at-10.20.26-am/screen-shot-2018-07-27-at-10.20.26-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9d005774-4138-49f9-96c0-be370aabf854",
              "caption": "",
              "alt": "",
              "width": 710,
              "height": 276,
              "instructor_notes": null
            },
            {
              "id": 632962,
              "key": "b9e63122-7a1f-4a85-b996-9303992e3666",
              "title": "Quiz: Composite Key",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b9e63122-7a1f-4a85-b996-9303992e3666",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following tables use a composite key? (Check all that apply.)",
                "answers": [
                  {
                    "id": "a1527618330650",
                    "text": "Category",
                    "is_correct": false
                  },
                  {
                    "id": "a1527618355237",
                    "text": "Film_category",
                    "is_correct": true
                  },
                  {
                    "id": "a1527618364087",
                    "text": "Film",
                    "is_correct": false
                  },
                  {
                    "id": "a1527618367486",
                    "text": "Film_actor",
                    "is_correct": true
                  },
                  {
                    "id": "a1527618371824",
                    "text": "Staff",
                    "is_correct": false
                  },
                  {
                    "id": "a1527618375704",
                    "text": "Inventory",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 620844,
          "key": "b3691541-d2ea-450e-b02f-9e04e42face9",
          "title": "Workspace: DVD Rental Database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b3691541-d2ea-450e-b02f-9e04e42face9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "DVD Rental ERD 2",
                "uri": "https://video.udacity-data.com/topher/2018/September/5ba96b7e_dvd-rental-erd-2/dvd-rental-erd-2.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 633013,
              "key": "b2a8dc77-a8b3-43fb-b02f-b17063eaedbc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Start Querying Your Data\nThe database Entity Relationship Diagram was provided at the start of this lesson, but you can also download it below. Now you can start querying your database! \n\nFirst, we could have a look at all the data from the Film table:\n\n```\nSELECT * FROM Film;\n```\n\nYour first query, AWESOME!\n\nNow check out what's in the Actor table.\n```\nSELECT * FROM Actor;\n```\n\n**Looks like you are ready to take on this PROJECT!** Everything you have been studying is going to come in handy now!\n\n\n*A quick note:* You can **ignore the \"last_update\" column** in the tables, as that column is part of the Sakila database but we will not be using it.\n\n**Note: If the proper tables for the DVD Rental Database do not appear** for some reason in the Schema below, you can fix this using the Menu in the lower left of the workspace. Make sure you have first saved any query you have entered, then click on Menu, then choose Reset Data, and type in \"Reset Data\" as directed. This will definitely bring up the proper schema tables for the DVD Rental Database.\n",
              "instructor_notes": ""
            },
            {
              "id": 727884,
              "key": "7dc215ac-e584-4c6c-812b-d319327a4c26",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-ljzjlh7ciws",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 632990,
          "key": "3796dbb7-5ceb-4c06-888f-d22dd69a4f1a",
          "title": "Understanding the database",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3796dbb7-5ceb-4c06-888f-d22dd69a4f1a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 689716,
              "key": "5ba6d3a5-bb4b-45d1-9a8e-82d1cb327512",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5ba6d3a5-bb4b-45d1-9a8e-82d1cb327512",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these columns are in the **RENTAL** table?",
                "answers": [
                  {
                    "id": "a1533578981320",
                    "text": "rental_id",
                    "is_correct": true
                  },
                  {
                    "id": "a1533578992749",
                    "text": "inventory_id",
                    "is_correct": true
                  },
                  {
                    "id": "a1533578993387",
                    "text": "rental_date",
                    "is_correct": true
                  },
                  {
                    "id": "a1533578994025",
                    "text": "customer_id",
                    "is_correct": true
                  },
                  {
                    "id": "a1533578994564",
                    "text": "return_date",
                    "is_correct": true
                  },
                  {
                    "id": "a1533579016261",
                    "text": "staff_id",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 633002,
              "key": "3d6ac307-420c-4b7e-8e02-73b1c95810fc",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3d6ac307-420c-4b7e-8e02-73b1c95810fc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "How many foreign keys exist in each of the following tables?\n"
                },
                "concepts_label": "Table ",
                "answers_label": "Number of Foreign Keys",
                "concepts": [
                  {
                    "text": "Rental",
                    "correct_answer": {
                      "id": "a1527623050509",
                      "text": "3"
                    }
                  },
                  {
                    "text": "City",
                    "correct_answer": {
                      "id": "a1527623085747",
                      "text": "1"
                    }
                  },
                  {
                    "text": "Store",
                    "correct_answer": {
                      "id": "a1527623086806",
                      "text": "2"
                    }
                  },
                  {
                    "text": "Film",
                    "correct_answer": {
                      "id": "a1527623087781",
                      "text": "0"
                    }
                  },
                  {
                    "text": "Payment",
                    "correct_answer": {
                      "id": "a1527623089868",
                      "text": "3"
                    }
                  },
                  {
                    "text": "Country",
                    "correct_answer": {
                      "id": "a1527623265336",
                      "text": "0"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1527623085747",
                    "text": "1"
                  },
                  {
                    "id": "a1527623087781",
                    "text": "0"
                  },
                  {
                    "id": "a1527623086806",
                    "text": "2"
                  },
                  {
                    "id": "a1527623411212",
                    "text": "3"
                  },
                  {
                    "id": "a1527623089868",
                    "text": "3"
                  },
                  {
                    "id": "a1527623401018",
                    "text": "4"
                  },
                  {
                    "id": "a1527623405243",
                    "text": "2"
                  },
                  {
                    "id": "a1527623050509",
                    "text": "3"
                  },
                  {
                    "id": "a1527623265336",
                    "text": "0"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 676622,
          "key": "ecd7b578-ce31-40d9-914a-714639448c11",
          "title": "Practice Quiz #1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ecd7b578-ce31-40d9-914a-714639448c11",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676635,
              "key": "71c724af-0833-4cb6-ac67-54895d0573e7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "71c724af-0833-4cb6-ac67-54895d0573e7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's start with creating a table that provides the following details: actor's first and last name combined as full_name, film title, film description and length of the movie. \n\nHow many rows are there in the table?",
                "answers": [
                  {
                    "id": "a1531942419973",
                    "text": "1000 rows",
                    "is_correct": false
                  },
                  {
                    "id": "a1533165863423",
                    "text": "200 rows",
                    "is_correct": false
                  },
                  {
                    "id": "a1533165864288",
                    "text": "5462 rows",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 676641,
              "key": "4aefab45-5486-4fef-993d-b0a2065d8869",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4aefab45-5486-4fef-993d-b0a2065d8869",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Write a query that creates a list of actors and movies where the movie length was more than 60 minutes.  How many rows are there in this query result?",
                "answers": [
                  {
                    "id": "a1531943245435",
                    "text": "562 rows",
                    "is_correct": false
                  },
                  {
                    "id": "a1531943360321",
                    "text": "4938 rows",
                    "is_correct": false
                  },
                  {
                    "id": "a1531943384094",
                    "text": "4900 rows",
                    "is_correct": true
                  },
                  {
                    "id": "a1531943404478",
                    "text": "524 rows",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 676645,
              "key": "aea8c0be-1ab3-45ae-860a-208a94ca7c90",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aea8c0be-1ab3-45ae-860a-208a94ca7c90",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Write a query that captures the actor id, full name of the actor, and counts the number of movies each actor has made. * (HINT: Think about whether you should group by actor id or the full name of the actor.*) Identify the actor who has made the maximum number movies.",
                "answers": [
                  {
                    "id": "a1531944389944",
                    "text": "Emily Dee",
                    "is_correct": false
                  },
                  {
                    "id": "a1531944498886",
                    "text": "Gina Degeneres",
                    "is_correct": true
                  },
                  {
                    "id": "a1531944505784",
                    "text": "Susan Davis",
                    "is_correct": false
                  },
                  {
                    "id": "a1531944518514",
                    "text": "Michael Bolger",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 727885,
              "key": "037a4b74-a0e4-419a-813d-280daaea6544",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-btcllr5nc2b",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 676697,
          "key": "30aa9caf-4023-4a29-b63e-3d2f504f62d5",
          "title": "Practice Solution #1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "30aa9caf-4023-4a29-b63e-3d2f504f62d5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676700,
              "key": "8d483366-c7de-40be-8887-de1820fb0a51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Here are my solutions for Practice Quiz 1 questions:**\n\n** Question 1:** Query that creates a table with the following details: actor's first and last name combined as full_name, film title and length of the movies.\n\n```\nSELECT a.first_name, \n       a.last_name,\n       a.first_name || ' ' || a.last_name AS full_name,\n       f.title,\n       f.length\nFROM   film_actor fa\nJOIN   actor a\nON     fa.actor_id = a.actor_id\nJOIN   film f\nON     f.film_id = fa.film_id```",
              "instructor_notes": ""
            },
            {
              "id": 676702,
              "key": "573243b4-aec2-4bb3-8991-66c7c4f912ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "--- ",
              "instructor_notes": ""
            },
            {
              "id": 676701,
              "key": "4b23d17e-878e-4b00-9405-751bcaeb2e28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Question 2:** Write a query that creates a list of actors and movies where the movie length was more than 60 minutes. \n```\nSELECT a.first_name, \n       a.last_name,\n       a.first_name || ' ' || a.last_name AS full_name,\n       f.title ,\n       f.length\nFROM   film_actor fa\nJOIN   actor a\nON     fa.actor_id = a.actor_id\nJOIN   film f\nON     f.film_id = fa.film_id\nWHERE  f.length > 60```",
              "instructor_notes": ""
            },
            {
              "id": 676703,
              "key": "878f1deb-041c-4959-907a-b9da130abb01",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----",
              "instructor_notes": ""
            },
            {
              "id": 676704,
              "key": "d2a588a4-5e12-41d4-90a8-1935f6fe8526",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Question 3:** Write a query that captures the full name of the actor, and counts the number of movies each actor has made. Identify the actor who has made the maximum number of movies. \n```\nSELECT actorid, full_name, \n       COUNT(filmtitle) film_count_peractor\nFROM\n    (SELECT a.actor_id actorid,\n\t        a.first_name, \n            a.last_name,\n            a.first_name || ' ' || a.last_name AS full_name,\n            f.title filmtitle\n    FROM    film_actor fa\n    JOIN    actor a\n    ON      fa.actor_id = a.actor_id\n    JOIN    film f\n    ON      f.film_id = fa.film_id) t1\nGROUP BY 1, 2\nORDER BY 3 DESC```",
              "instructor_notes": ""
            },
            {
              "id": 727886,
              "key": "22a97d5d-1442-4fb0-be56-c07d0923d224",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-cm56dxzif8",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 676623,
          "key": "9cb5a5ce-aa9b-4616-bf7a-e2a35624e42c",
          "title": "Practice Quiz #2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9cb5a5ce-aa9b-4616-bf7a-e2a35624e42c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676689,
              "key": "58ce2ffc-0502-4cfb-8bbb-cb3fc9406a0f",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "58ce2ffc-0502-4cfb-8bbb-cb3fc9406a0f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Write a query that displays a table with 4 columns: actor's full name, film title, length of movie, and a column name \"filmlen_groups\" that classifies movies based on their length. Filmlen_groups should include 4 categories: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.\n\n** Match the filmlen_groups with the movie titles in your result dataset.**"
                },
                "concepts_label": "Film title",
                "answers_label": "filmlen_groups",
                "concepts": [
                  {
                    "text": "Academy Dinosaur",
                    "correct_answer": {
                      "id": "a1531947785819",
                      "text": "Between 1-2 hours"
                    }
                  },
                  {
                    "text": "Color Philadelphia",
                    "correct_answer": {
                      "id": "a1531947844182",
                      "text": "Between 2-3 hours"
                    }
                  },
                  {
                    "text": "Oklahoma Jumanji",
                    "correct_answer": {
                      "id": "a1531947846837",
                      "text": "1 hour or less"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1531947785819",
                    "text": "Between 1-2 hours"
                  },
                  {
                    "id": "a1531947846837",
                    "text": "1 hour or less"
                  },
                  {
                    "id": "a1531947844182",
                    "text": "Between 2-3 hours"
                  }
                ]
              }
            },
            {
              "id": 676695,
              "key": "ff7aa5e7-b4c2-4133-aef9-12b0cff21dd5",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ff7aa5e7-b4c2-4133-aef9-12b0cff21dd5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Now, we bring in the advanced SQL query concepts! Revise the query you wrote above to create a count of movies in each of the 4 filmlen_groups: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.\n\n** Match the count of movies in each filmlen_group.**"
                },
                "concepts_label": "Filmlen_groups",
                "answers_label": "Count of movies in each category",
                "concepts": [
                  {
                    "text": "1 hour or less",
                    "correct_answer": {
                      "id": "a1531949078348",
                      "text": "104"
                    }
                  },
                  {
                    "text": "Between 1-2 hours",
                    "correct_answer": {
                      "id": "a1531949252815",
                      "text": "439"
                    }
                  },
                  {
                    "text": "Between 2-3 hours",
                    "correct_answer": {
                      "id": "a1531949256882",
                      "text": "418"
                    }
                  },
                  {
                    "text": "More than 3 hours",
                    "correct_answer": {
                      "id": "a1531949259772",
                      "text": "39"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1531949259772",
                    "text": "39"
                  },
                  {
                    "id": "a1531949078348",
                    "text": "104"
                  },
                  {
                    "id": "a1531949256882",
                    "text": "418"
                  },
                  {
                    "id": "a1531951627296",
                    "text": "200"
                  },
                  {
                    "id": "a1531949252815",
                    "text": "439"
                  },
                  {
                    "id": "a1531951431419",
                    "text": "562"
                  },
                  {
                    "id": "a1531951619720",
                    "text": "2297"
                  },
                  {
                    "id": "a1531951598343",
                    "text": "2403"
                  }
                ]
              }
            },
            {
              "id": 727887,
              "key": "eb15e79a-c695-40ef-85da-8b9f0ed2ab10",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-a0uvb88tzrm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 676698,
          "key": "37f4963e-0c42-44ec-b84e-a00489f8c634",
          "title": "Practice Solution #2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "37f4963e-0c42-44ec-b84e-a00489f8c634",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676706,
              "key": "e99213f7-f026-4840-abef-020f372b28d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Here are my solutions for Practice Quiz 2 questions:**\n\n**Question 1: ** Write a query that creates a table with 4 columns: actor's full name, film title, length of movie, and a column name \"filmlen_groups\" that classifies movies based on their length. Filmlen_groups should include 4 categories: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.\n\n```\nSELECT full_name, \n       filmtitle,\n       filmlen,\n       CASE WHEN filmlen <= 60 THEN '1 hour or less'\n       WHEN filmlen > 60 AND filmlen <= 120 THEN 'Between 1-2 hours'\n       WHEN filmlen > 120 AND filmlen <= 180 THEN 'Between 2-3 hours'\n       ELSE 'More than 3 hours' END AS filmlen_groups\nFROM \n\t(SELECT a.first_name, \n\t\t       a.last_name,\n\t\t       a.first_name || ' ' || a.last_name AS full_name,\n\t\t       f.title filmtitle, \n\t\t       f.length filmlen\n\t\tFROM film_actor fa\n\t\tJOIN actor a\n\t\tON fa.actor_id = a.actor_id\n\t\tJOIN film f\n\t\tON f.film_id = fa.film_id) t1\n```",
              "instructor_notes": ""
            },
            {
              "id": 676707,
              "key": "94b8274d-bc54-45df-8d11-7dd988b6ca00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "** Question 2:** Write a query you to create a count of movies in each of the 4 filmlen_groups: 1 hour or less, Between 1-2 hours, Between 2-3 hours, More than 3 hours.\n```\n\nSELECT    DISTINCT(filmlen_groups),\n          COUNT(title) OVER (PARTITION BY filmlen_groups) AS filmcount_bylencat\nFROM  \n         (SELECT title,length,\n      \tCASE WHEN length <= 60 THEN '1 hour or less'\n      \tWHEN length > 60 AND length <= 120 THEN 'Between 1-2 hours'\n      \tWHEN length > 120 AND length <= 180 THEN 'Between 2-3 hours'\n      \tELSE 'More than 3 hours' END AS filmlen_groups\n          FROM film ) t1\nORDER BY  filmlen_groups\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 727888,
              "key": "22904731-41e1-41ca-b017-f568fa291e43",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-n3fgtl3lisr",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 633017,
          "key": "45f09540-1a6b-4e7f-8ef4-4a20487f5c1b",
          "title": "Workspace + Question Set #1",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45f09540-1a6b-4e7f-8ef4-4a20487f5c1b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 689736,
              "key": "cc379aa1-15bb-490b-84e3-914ab05ba765",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Workspace\n\nWe have provided a Workspace at the bottom of this page for you to run your queries. Please feel free to use it to write your queries, run them, and export the data to a .csv file.\n\n## What are the Question Sets?\n\nWe have also provided a set of questions that you are free to consider and include in your Project Submission.  These are solely provided for your convenience, and you can choose to use any of the questions in these sets or none at all in your project submission.\n\n** If you are unsure what queries to generate (for e.g., what kind of query will require the use of Window Functions), we strongly recommend using questions from the question set. **\n\n",
              "instructor_notes": ""
            },
            {
              "id": 690189,
              "key": "b715e9a8-0823-4c48-92b5-679e1fdbeadb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "-----",
              "instructor_notes": ""
            },
            {
              "id": 633019,
              "key": "9550bf02-8a8e-4ffb-bd5b-29fd3aa009ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 1\nWe want to understand more about the movies that families are watching.  The following categories are considered family movies: Animation, Children, Classics, Comedy, Family and Music. \n\n** Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.**\n\n### Check Your Solution\nFor this query, you will need 5 tables: Category, Film_Category, Inventory, Rental and Film. \nYour solution should have three columns: Film title, Category name and Count of Rentals. \n\nThe following table header provides a preview of what the resulting table should look like if you order by category name followed by the film title.\n\n_HINT:_ One way to solve this is to create a count of movies using aggregations, subqueries and Window functions.",
              "instructor_notes": ""
            },
            {
              "id": 633033,
              "key": "e5259972-07ae-47c9-aaba-9bce629c2569",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b0dbd61_ques1a/ques1a.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5259972-07ae-47c9-aaba-9bce629c2569",
              "caption": "",
              "alt": "",
              "width": 611,
              "height": 383,
              "instructor_notes": null
            },
            {
              "id": 690190,
              "key": "c7b0fa30-1149-42b2-ba40-62a5c8a8e47d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<br>",
              "instructor_notes": ""
            },
            {
              "id": 690193,
              "key": "e3530353-111a-4111-bbbd-3fe13d99fb4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----------------",
              "instructor_notes": ""
            },
            {
              "id": 633034,
              "key": "57f6350d-c19d-4a67-90ca-32087d5d2da6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 2\nNow we need to know how the length of rental duration of these family-friendly movies compares to the duration that all movies are rented for. **Can you provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the rental duration for movies across all categories?** Make sure to also indicate the category that these family-friendly movies fall into.\n\n### Check Your Solution\nThe data are not very spread out to create a very fun looking solution, but you should see something like the following if you correctly split your data.  You should only need the category, film_category, and film tables to answer this and the next questions.\n\f\n\n_HINT:_ One way to solve it requires the use of percentiles, Window functions, subqueries or temporary tables.\n",
              "instructor_notes": ""
            },
            {
              "id": 682702,
              "key": "2aaffcd0-6a5e-4f42-af5b-c8507773a910",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b5bb10c_screen-shot-2018-07-27-at-4.55.29-pm/screen-shot-2018-07-27-at-4.55.29-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2aaffcd0-6a5e-4f42-af5b-c8507773a910",
              "caption": "",
              "alt": "",
              "width": 765,
              "height": 419,
              "instructor_notes": null
            },
            {
              "id": 690194,
              "key": "8f1e3cbf-d42a-48c5-a768-5566c9f50fd5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<br>",
              "instructor_notes": ""
            },
            {
              "id": 690191,
              "key": "4eb774f8-abb0-481b-acd7-d9760f7df12b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----------------",
              "instructor_notes": ""
            },
            {
              "id": 633035,
              "key": "8a227e54-3f68-4861-8b4c-48493540f51c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 3\nFinally, provide a table with the family-friendly film category, each of the quartiles, and the corresponding count of movies within each combination of film category for each corresponding rental duration category. \n The resulting table should have three columns: \n\n* Category\n* Rental length category \n* Count \n\n\n### Check Your Solution\n\nThe following table header provides a preview of what your table should look like. The Count column should be sorted first by Category and then by Rental Duration category.\n\n_HINT:_ One way to solve this question requires the use of Percentiles, Window functions and Case statements.",
              "instructor_notes": ""
            },
            {
              "id": 682701,
              "key": "73546641-a793-4f39-bfd9-5f0eefb78e9a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/July/5b5bb0ca_screen-shot-2018-07-27-at-4.54.31-pm/screen-shot-2018-07-27-at-4.54.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/73546641-a793-4f39-bfd9-5f0eefb78e9a",
              "caption": "",
              "alt": "",
              "width": 759,
              "height": 354,
              "instructor_notes": null
            },
            {
              "id": 690192,
              "key": "1c0d0511-e82a-49e9-9ac4-b4170c8fb144",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---------\n\n### Workspace\nWe have provided this  Workspace for you to run your queries.\n\n(Again, if the incorrect tables happen to appear in your schema below, you can fix this using the Menu in the lower left of the workspace. Make sure you have first saved any query you have entered, then click on Menu, then choose Reset Data, and type in \"Reset Data\" as directed. This will definitely bring up the proper schema tables for the DVD Rental Database.)",
              "instructor_notes": ""
            },
            {
              "id": 727889,
              "key": "24fae473-e37e-4c5c-a4a2-80838e28bd4a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-x7byeykdx6",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 633062,
          "key": "5f20371f-1aaf-4666-a4ff-6193f3ac44cb",
          "title": "Workspace + Question Set #2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f20371f-1aaf-4666-a4ff-6193f3ac44cb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676630,
              "key": "a2477817-e206-465f-9c9e-2367fac7a1a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Workspace\n\nWe have provided the Workspace at the end of the page for you to run your queries. Please feel free to use it to write your queries, run them, and export the data to a .csv file.\n\n## Question Set 2\n\nThe questions in this question set use the more advanced techniques of the course. These are meant to help you practice some of these more advanced techniques. Again, you have the choice to use any of these questions or use your own.  Remember, you need only to submit queries that meet the criteria as specified in the [Rubric](https://review.udacity.com/#!/rubrics/2095/view).",
              "instructor_notes": ""
            },
            {
              "id": 690201,
              "key": "6a804032-f566-4928-afc2-5c3de904bbba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<br>",
              "instructor_notes": ""
            },
            {
              "id": 690199,
              "key": "ddbdd3eb-a3ff-4ebd-ba2a-8cf0ef235ee9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----------",
              "instructor_notes": ""
            },
            {
              "id": 633064,
              "key": "fde8a2f8-0e48-470d-b34c-fb1df97c606d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 1:\nWe want to find out how the two stores compare in their count of rental orders during every month for all the years we have data for. ** Write a query that returns the store ID for the store, the year and month and the number of rental orders each store has fulfilled for that month. Your table should include a column for each of the following:  year, month, store ID and count of rental orders fulfilled during that month.** \n\n### Check Your Solution\nThe following table header provides a preview of what your table should look like. The count of rental orders is sorted in descending order.\n\n_HINT:_ One way to solve this query is the use of aggregations.",
              "instructor_notes": ""
            },
            {
              "id": 689754,
              "key": "fac59522-7f4e-4a0c-84cc-df7aee735128",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b68b2f0_question-set2-ques1/question-set2-ques1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fac59522-7f4e-4a0c-84cc-df7aee735128",
              "caption": "",
              "alt": "",
              "width": 622,
              "height": 153,
              "instructor_notes": null
            },
            {
              "id": 690203,
              "key": "243845e7-dedd-493e-92d6-c7ee88a219e5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<br>",
              "instructor_notes": ""
            },
            {
              "id": 690198,
              "key": "530bb1bc-6ceb-4d7b-98e8-36bfbc29f55e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----------------",
              "instructor_notes": ""
            },
            {
              "id": 633078,
              "key": "d84a79ad-bd7e-4827-975b-eec52f32c39e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 2\nWe would like to know who were our top 10 paying customers, how many payments they made on a monthly basis during 2007, and what was the amount of the monthly payments. **Can you write a query to capture the customer name, month and year of payment, and total payment amount for each month by these top 10 paying customers?**\n\n### Check your Solution:\nThe following table header provides a preview of what your table should look like. The results are sorted first by customer name and then for each month. As you can see, total amounts per month are listed for each customer.\n\n_HINT:_  One way to solve is to use a subquery, limit within the subquery, and use concatenation to generate the customer name.",
              "instructor_notes": ""
            },
            {
              "id": 633420,
              "key": "e678e8be-54f7-4261-83a6-9030d7e91bba",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b0f0ffc_ques-2b/ques-2b.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e678e8be-54f7-4261-83a6-9030d7e91bba",
              "caption": "",
              "alt": "",
              "width": 608,
              "height": 232,
              "instructor_notes": null
            },
            {
              "id": 690204,
              "key": "d529ad19-431c-4e40-84ef-9e53623e0fba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "-----",
              "instructor_notes": ""
            },
            {
              "id": 633079,
              "key": "c47eb4f8-b699-49b4-9065-baa23a9d1116",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Question 3\nFinally, for each of these top 10 paying customers, I would like to find out the difference across their monthly payments during 2007. Please go ahead and ** write a query to compare the payment amounts in each successive month.** Repeat this for each of these 10 paying customers. Also, it will be tremendously helpful if you can identify the customer name who paid the most difference in terms of payments.\n\n### Check your solution:\nThe customer Eleanor Hunt paid the maximum difference of $64.87 during March 2007 from $22.95 in February of 2007. \n\n_HINT:_ You can build on the previous questions query to add Window functions and aggregations to get the solution.",
              "instructor_notes": ""
            },
            {
              "id": 690197,
              "key": "18f075ad-d18f-41b6-8631-796e384ccdff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----------------",
              "instructor_notes": ""
            },
            {
              "id": 727893,
              "key": "a677fa92-1393-4a7c-a28a-0a2e981f0b30",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view77p500hikml",
              "pool_id": "sqlwidget",
              "view_id": "sql-evaluator-ar7lemk6ykp",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "allowSubmit": false
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 633107,
          "key": "eebd783f-5a4d-45a8-9f8d-25ab6ea93946",
          "title": "Project Submission",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "eebd783f-5a4d-45a8-9f8d-25ab6ea93946",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "SQL Project Submission Template",
                "uri": "https://video.udacity-data.com/topher/2018/May/5b0de21b_sql-project-submission-template-1/sql-project-submission-template-1.pptx"
              },
              {
                "name": "SQL Project Submission Example",
                "uri": "https://video.udacity-data.com/topher/2020/February/5e443983_sql-project-submission-example/sql-project-submission-example.pptx"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 633115,
              "key": "4b5f3edb-d68d-40a0-a348-7fa3146b9b83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Project Submissions\n### Presentations\nYou are now on the portion of the project you will need to submit to a reviewer. To pass this project follow the instructions below to create a presentation.  You will submit a zip file with two items:\n* Slide Deck (4 slides)\n* Text File with SQL queries\n\nYour presentation should include:\n- Four slides\n- One question on each slide\n- One visualization (graph / chart / table) per slide\n- A 1-2 sentence answer to the question, based on the data and visualization, on each slide\n- Indicate which code in the attached text file was used to create the visualization OR add the query used to generate the visualization.\n\n** Note:** You may choose to use queries that were motivated by the two Question Sets, or you may choose four entirely new questions.  However, ** you cannot use questions or queries resembling any of the ones in Practice Quiz #1 and #2.** Make sure your queries meet the requirements specified in the [Rubric](https://review.udacity.com/#!/rubrics/2095/view).\n\nYou may use any slideshow application you like, such as Google Slides, Powerpoint, or Keynote. We are providing you a template below (see blue button titled Submission Template) that you may use for your presentation, if you'd like. If you want to use PowerPoint or Keynote or some other application instead, just adapt this template for the application you choose. For your convenience, we have provided the PowerPoint slides in the Resources.\n\nMake a copy of the submission template to complete your project. We suggest you use the layout provided, though it is not a requirement.\n\n### Queries\nPlease create a text file, using an application such as Notepad, Notepad++, or any other text editor - at Udacity we are fond of Atom.   This file should include each of the queries you used to create your visualizations. \n\nAn important aspect of writing SQL queries is following a recommended format. This will improve readability and troubleshooting when you encounter an exception or error. Two  such highly recommended SQL guides are the following two:\n- https://www.sqlstyle.guide/ \n- http://www.sql-format.com/\n\nWe encourage you to use the SQL Style Guide to help you write well formatted SQL queries and improve their readability.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 633122,
              "key": "1edeb883-e5dc-4a29-b3c7-e82193d55da0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b0ddea4_sql-query-2ndimage/sql-query-2ndimage.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1edeb883-e5dc-4a29-b3c7-e82193d55da0",
              "caption": "Sample Text File",
              "alt": "Sample Text File",
              "width": 994,
              "height": 484,
              "instructor_notes": null
            },
            {
              "id": 633123,
              "key": "0300c840-d442-4c9a-8329-f9b7bf716344",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Put your text file and presentation in a folder and zip it. Then submit the zipped folder for your project**. A slide template is provided here:\n \n<center><a href=\"https://docs.google.com/presentation/d/1l6NMD_m4J4Mfb2wd4WP_x2hwCkCZ5-isWhGan2SIURg/edit?usp=sharing\" target=\"_blank\"><button style=\"box-sizing: border-box; border-radius: 4px; background: #02B3E4; border: none; height: 44px; padding: 0 25px; color: white; cursor: pointer; font-family: Open Sans,sans-serif; display: inline-block; border: none; font-size: 12px; letter-spacing: 1px; font-weight: 600; text-transform: uppercase;\">Submission Template</button></a></center>\n\n\n#### Visualizations\nWe suggest you use a spreadsheet application, such as Excel or Google Sheets to create your visualizations. However, you’re welcome to use whatever tool you’d like.  Below is one example, and a link has been provided to an example slide.\n",
              "instructor_notes": ""
            },
            {
              "id": 691141,
              "key": "4f0c9de4-6377-4d3d-a416-2ef729bebf15",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/August/5b6ce36e_sample-visualization/sample-visualization.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4f0c9de4-6377-4d3d-a416-2ef729bebf15",
              "caption": "",
              "alt": "",
              "width": 989,
              "height": 561,
              "instructor_notes": null
            },
            {
              "id": 633130,
              "key": "8d82a29d-7ae0-417d-91b8-7d4759bbd5d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You should have four slides that are similar to the Submission Slide Example below. Remember:\n- The questions you ask are up to you.\n- ** All four** of your final submitted queries should contain a **JOIN** and **AGGREGATION**.\n- ** At least two** of your final submitted queries should contain either a ** subquery** OR a ** CTE**.\n- ** At least one** of your final submitted queries should contain a ** Window Function**.\n- ** At least one** column generated by the Window Function should be included in one of your  final visualization.\n<br><br>\n<center><a href=\"https://docs.google.com/presentation/d/12SaYwkKvl4t54vx0voMxphvIuXUXE0XMTRtwRggaiyw/edit?usp=sharing\" target=\"_blank\"><button style=\"box-sizing: border-box; border-radius: 4px; background: #02B3E4; border: none; height: 44px; padding: 0 25px; color: white; cursor: pointer; font-family: Open Sans,sans-serif; display: inline-block; border: none; font-size: 12px; letter-spacing: 1px; font-weight: 600; text-transform: uppercase;\">Submission Slide Example</button></a></center>\n<br>\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 633131,
              "key": "916e6bc0-c9ad-4f3c-9720-37fb37eb5f9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### How to Get Data Into Excel\nIn order to create the visualizations, you will need to move your data out of workspace and into Excel (or another spreadsheet application). To export the results of your queries from the Project Workspace, use the Download CSV button (see image below) which is on the top right of the results window.\n",
              "instructor_notes": ""
            },
            {
              "id": 633132,
              "key": "68e202a8-029d-438c-809d-20e3365907d4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5b0de102_downloadcsv/downloadcsv.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/68e202a8-029d-438c-809d-20e3365907d4",
              "caption": "",
              "alt": "",
              "width": 853,
              "height": 417,
              "instructor_notes": null
            },
            {
              "id": 633133,
              "key": "ce1b810d-97c2-409c-9cd3-643e3f56cbd4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Guidelines:\n- There shouldn’t be any additional data prep (sorting, filtering, renaming, etc.) between the query output and the visualization.\n- Review your project against the [project rubric](https://review.udacity.com/#!/rubrics/2095/view).\n- Reviewers will use this to evaluate your work.\n- The first part of this project is aimed at helping you understand the database, so you can ask interesting questions in the second part. Feel free to use and expand upon the queries you wrote in the first part.\n- Once you've finished your project, submit the presentation as a PDF and the queries as a .txt file.\n\n**In order to review your presentation, you will need to save your slides as a** `PDF`. You can do this from within Google Slides by selecting **File > Download as > PDF Document.**",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 633108,
          "key": "d47ab4d9-bd82-4d91-b271-7a91aceb4873",
          "title": "Common Mistakes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d47ab4d9-bd82-4d91-b271-7a91aceb4873",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 633114,
              "key": "3505d67d-aa60-413c-b065-4fb7e1f12c2f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Aggregations\nBe careful with Aggregations! You need to include all of the columns you are returning other than the aggregation in your group by statement.\n\nCorrect:\n```\nSELECT film_id, count(*)\nFROM inventory\nGROUP BY film_id\n```\n- This returns 958 rows, with the film_id and the number of inventory associated with that film_id.\n\n---\nIncorrect:\n```\nSELECT count(film_id)\nFROM inventory```\n\n- This returns 1 row, with the count of film_id in the table.\n\nIf a column in the select statement is not in the Group By statement your results will be something you are not expecting. Please be careful of this!\n\n### Subqueries\nSubqueries are awesome but you should not use one if you do not need it to answer the question you asked. Many times the first question that is thought of does not require one. You may need to think of a few more to find a complex question that necessitates a subquery. \n\n** Think of using a subquery when a SQL query is nested within another query. You need it to further restrict the returned data, so give careful thought to where. **\n\n\n\n### Window Functions\nWindow Functions are extremely ** useful for creating an aggregation or doing any other calculation across a subset of rows.** Once you have completed the calculation across the subset of rows, you can then reference the calculation as a new column in the query. You are required to use a window function in your query for this project. \n\nThink about when you need to aggregate across a subset of rows within a larger data table resulting from a query.\n \n\n\n### Joins\nJoins in general should be from a Primary Key to its corresponding Foreign Key.\n\nCorrect:\n```ON inventory.inventory_id = rental.inventory_id```\n- Here, Inventory PrimaryKey = Inventory ForeignKey\n___\nIncorrect: \n```ON inventory.inventory_id = rental.rental_id```\n- Here, Inventory PrimaryKey does not equal Rental PrimaryKey\n\n\n### Understanding the data\nThe Rentals table captures the rental history of the inventory of movie titles. Keep this in mind in case you are trying to show which movie has the most rentals. You would have to show which movie has the most copies or inventory rented out.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 633116,
          "key": "fed111cc-2bd4-4b32-bd15-8fc9ba31c966",
          "title": "Helpful strategies",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fed111cc-2bd4-4b32-bd15-8fc9ba31c966",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 633117,
              "key": "2ea5e464-8e96-40b8-b143-41086b1c9625",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Helpful tips and strategies!\n<BR>\n\n- Take the time to get familiar with each table in the ERD. Run basic queries to understand the tables and how they relate to each other. This is a critical foundational step to building advanced queries.\n\n\n- Start creating and posing your questions, then work backwards to identify the tables you'll need to answer your questions. \n\n\n- Pay attention to the intermediate query results you will need to take to get to the final query result.\n\n\n-  Break down the logic of the question to identify and draw out the table for each subquery and the final query result you are aiming for. These intermediate tables can also help you identify any subquery, common table expression or Window Function you may need to run.\n\n\n- Take breaks! Abstract concepts need time to percolate through so you can see a solution. When you find yourself in a rut with a difficult problem, take a short break and then come back to try it again.\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}